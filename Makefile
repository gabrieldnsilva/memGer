# Compilador e flags
CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -g
LDFLAGS = 

# Diret√≥rios
SRCDIR = src
BUILDDIR = build
OBJDIR = $(BUILDDIR)/obj
BINDIR = $(BUILDDIR)/bin

# Nome do execut√°vel
TARGET = memGer
TARGET_PATH = $(BINDIR)/$(TARGET)

# Arquivos fonte e objetos
SOURCES = $(wildcard $(SRCDIR)/*.c)
OBJECTS = $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)

# Diret√≥rio de include
INCLUDES = -I$(SRCDIR)

# Regra padr√£o
all: directories $(TARGET_PATH)

# Criar diret√≥rios necess√°rios
directories:
	@mkdir -p $(OBJDIR)
	@mkdir -p $(BINDIR)

# Compilar o execut√°vel
$(TARGET_PATH): $(OBJECTS)
	@echo "üîó Linkando $(TARGET)..."
	$(CC) $(OBJECTS) -o $@ $(LDFLAGS)
	@echo "‚úÖ Build conclu√≠do: $(TARGET_PATH)"

# Compilar arquivos objeto
$(OBJDIR)/%.o: $(SRCDIR)/%.c
	@echo "üî® Compilando $<..."
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Depend√™ncias espec√≠ficas
$(OBJDIR)/main.o: $(SRCDIR)/main.c $(SRCDIR)/page_replacement.h
$(OBJDIR)/fifo.o: $(SRCDIR)/fifo.c $(SRCDIR)/page_replacement.h
$(OBJDIR)/lru.o: $(SRCDIR)/lru.c $(SRCDIR)/page_replacement.h
$(OBJDIR)/utils.o: $(SRCDIR)/utils.c $(SRCDIR)/page_replacement.h

# Executar o programa
run: $(TARGET_PATH)
	@echo "üöÄ Executando $(TARGET)..."
	@cd $(BINDIR) && ./$(TARGET)

# Depura√ß√£o com GDB
debug: $(TARGET_PATH)
	@echo "üêõ Iniciando depura√ß√£o..."
	@cd $(BINDIR) && gdb ./$(TARGET)

# Verificar vazamentos de mem√≥ria com Valgrind
valgrind: $(TARGET_PATH)
	@echo "üîç Verificando vazamentos de mem√≥ria..."
	@cd $(BINDIR) && valgrind --leak-check=full --show-leak-kinds=all ./$(TARGET)

# Instalar (copiar para /usr/local/bin)
install: $(TARGET_PATH)
	@echo "üì¶ Instalando $(TARGET)..."
	sudo cp $(TARGET_PATH) /usr/local/bin/
	@echo "‚úÖ $(TARGET) instalado em /usr/local/bin/"

# Desinstalar
uninstall:
	@echo "üóëÔ∏è  Removendo $(TARGET)..."
	sudo rm -f /usr/local/bin/$(TARGET)
	@echo "‚úÖ $(TARGET) removido"

# Limpeza
clean:
	@echo "üßπ Limpando arquivos de build..."
	rm -rf $(BUILDDIR)
	@echo "‚úÖ Limpeza conclu√≠da"

# Limpeza completa (incluindo cache do git)
distclean: clean
	@echo "üßπ Limpeza completa..."
	rm -rf .git/objects/*

# Mostrar informa√ß√µes do projeto
info:
	@echo "üìä Informa√ß√µes do Projeto memGer"
	@echo "================================="
	@echo "Compilador: $(CC)"
	@echo "Flags: $(CFLAGS)"
	@echo "Diret√≥rio fonte: $(SRCDIR)"
	@echo "Diret√≥rio build: $(BUILDDIR)"
	@echo "Execut√°vel: $(TARGET_PATH)"
	@echo "Arquivos fonte:"
	@for src in $(SOURCES); do echo "  - $$src"; done

# Mostrar ajuda
help:
	@echo "üÜò Comandos dispon√≠veis:"
	@echo "========================"
	@echo "make         - Compilar o projeto"
	@echo "make run     - Compilar e executar"
	@echo "make debug   - Compilar e executar com GDB"
	@echo "make valgrind- Verificar vazamentos com Valgrind"
	@echo "make clean   - Limpar arquivos de build"
	@echo "make install - Instalar no sistema"
	@echo "make info    - Mostrar informa√ß√µes do projeto"
	@echo "make help    - Mostrar esta ajuda"

.PHONY: all directories run debug valgrind install uninstall clean distclean info help
